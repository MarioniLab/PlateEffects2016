
R version 3.2.2 (2015-08-14) -- "Fire Safety"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ##################################################
> # Setting up the simulation parameters.
> 
> set.seed(10000)
> 
> conditions <- rep(c("A", "B"), each=3)
> nplates <- length(conditions)
> ngenes <- 10000
> ncells <- 50
> 
> all.means <- exp(runif(ngenes, 3, 8))
> disp <- 0.5 + 100/all.means
> plate.var <- 0.5
> 
> cell.grouping <- factor(rep(conditions, each=ncells))
> design.all <- model.matrix(~cell.grouping)
> plate.grouping <- factor(conditions)
> design.sum <- model.matrix(~plate.grouping)
> 
> alphas <- c(1e-5, 1e-4, 1e-3, 0.01, 0.1)
> alphas <- sort(c(alphas, alphas*3))
> first.set <- 1:1000
> second.set <- first.set + 1000
> combined.set <- c(first.set, second.set)
> plate.of.origin <- rep(seq_len(nplates), each=ncells)
> 
> ##################################################
> 
> compute.roc <- function(x) {
+     x[is.na(x)] <- 1
+     fn <- x[combined.set]
+     tn <- x[-combined.set]
+     return(findInterval(sort(fn), sort(tn))/length(tn))    
+ }
> 
> ##################################################
> # Running across all options.
> 
> suppressPackageStartupMessages(require(edgeR))
> suppressPackageStartupMessages(require(DESeq2))
> 
> for (pv in c(0, plate.var)) {
+     edgeR.collected <- DESeq2.collected <- voom.collected <- list(sum=list(), raw=list())
+ 
+     for (it in 1:10) {
+         # Adding variable variability to the plate effect, or to the dispersions if no plate effect exists.
+         # Also scaling down the fold change without a plate effect, otherwise we just get a perfect ROC curve.
+         var.scale <- 2/rchisq(ngenes, df=4)
+         if (pv!=0) {
+             fc <- 3
+             alt.pv <- pv * var.scale
+             alt.disp <- disp
+         } else {
+             fc <- 1.5
+             alt.pv <- pv
+             alt.disp <- disp * var.scale
+         }
+ 
+         mean.per.plate <- all.means * exp(matrix(rnorm(nplates*ngenes, -alt.pv/2, sqrt(alt.pv)), ncol=nplates))
+         
+         # Adding balanced 2-fold DE to the first 2000 genes. Don't worry about DE being concentrated at high-abundances,
+         # the fact that we have a spread of abundances for non-DE genes should mitigate any effects.
+         mean.per.plate[first.set,conditions=="A"] <- mean.per.plate[first.set,conditions=="A"]*fc
+         mean.per.plate[second.set,conditions=="B"] <- mean.per.plate[second.set,conditions=="B"]*fc
+ 
+         all.counts <- matrix(0L, nrow=ngenes, ncol=ncells*nplates)
+         for (x in seq_len(nplates)) {
+             all.counts[,seq_len(ncells)+ncells*(x-1L)] <- rnbinom(ngenes*ncells, mu=mean.per.plate[,x], size=1/alt.disp)
+         }
+ 
+         for (mode in c("raw", "sum")) {
+             if (mode=="raw") {
+                 counts <- all.counts
+                 design <- design.all
+                 grp <- cell.grouping
+             } else {
+                 counts <- sumTechReps(all.counts, plate.of.origin)
+                 design <- design.sum
+                 grp <- plate.grouping
+             }
+ 
+             # edgeR QL:
+             y <- DGEList(counts)
+             y <- calcNormFactors(y)
+             y <- estimateDisp(y, design, prior.df=0)
+             fit <- glmQLFit(y, design, robust=TRUE)
+             res <- glmQLFTest(fit)
+             edgeR.collected[[mode]][[it]] <- compute.roc(res$table$PValue)
+ 
+             # DESeq2
+             suppressMessages(dds <- DESeqDataSetFromMatrix(counts, colData=DataFrame(grp=grp), design = ~grp))
+             suppressMessages(dds <- DESeq(dds))
+             res <- results(dds, c("grp", "A", "B"))
+             DESeq2.collected[[mode]][[it]] <- compute.roc(res$pvalue)
+ 
+             # voom without correlations
+             v.all <- voom(y, design)
+             fit <- lmFit(v.all, design)
+             fit <- eBayes(fit, robust=TRUE)
+             res <- topTable(fit, n=Inf, sort.by="none", coef=2)
+             voom.collected[[mode]][[it]] <- compute.roc(res$P.Value)
+ 
+             # Also trialling voom with correlations, for reference (pretty much the same as voom):
+             # plate.of.origin <- rep(seq_len(nplates), each=ncells)
+             # dc <- duplicateCorrelation(v.all, design=design, block=plate.of.origin)
+             # fit <- lmFit(v.all, design, block=plate.of.origin, correlation=dc$consensus)
+             # fit <- eBayes(fit, robust=TRUE)
+             # res <- topTable(fit, n=Inf, sort.by="none", coef=2)
+             # voom.cor <- compute.roc(res$P.Value)
+ 
+         }
+     }
+ 
+     saveRDS(file=ifelse(pv<1e-8, "without.rds", "with.rds"), list(edgeR=edgeR.collected, DESeq2=DESeq2.collected, voom=voom.collected))
+     
+     # Printing out some output as a record.
+     cat(sprintf("Results for PV=%.1f\n", pv))
+     cat("\tedgeR raw\n")
+     print(summary(colMeans(do.call(rbind, edgeR.collected$raw))))
+     cat("\tedgeR sum\n")
+     print(summary(colMeans(do.call(rbind, edgeR.collected$sum))))
+ 
+     cat("\tvoom raw\n")
+     print(summary(colMeans(do.call(rbind, voom.collected$raw))))
+     cat("\tvoom sum\n")
+     print(summary(colMeans(do.call(rbind, voom.collected$sum))))
+ 
+     cat("\tDESeq2 raw\n")
+     print(summary(colMeans(do.call(rbind, DESeq2.collected$raw))))
+     cat("\tDESeq2 sum\n")
+     print(summary(colMeans(do.call(rbind, DESeq2.collected$sum))))
+     cat("\n")
+ }
Results for PV=0.0
	edgeR raw
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
0.0000375 0.0002250 0.0005562 0.0330900 0.0064500 0.9897000 
	edgeR sum
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
0.0000000 0.0001625 0.0012310 0.0337400 0.0117000 0.9859000 
	voom raw
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
0.0000000 0.0000000 0.0001875 0.0817100 0.0344200 0.9957000 
	voom sum
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
0.0000000 0.0001375 0.0011060 0.0402700 0.0126700 0.9854000 
	DESeq2 raw
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
0.0000000 0.0000000 0.0000125 0.0448100 0.0052160 0.9885000 
	DESeq2 sum
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
0.000000 0.000150 0.001162 0.038580 0.011860 0.992900 

Results for PV=0.5
	edgeR raw
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
0.0000625 0.0227100 0.0704600 0.1494000 0.1924000 0.9940000 
	edgeR sum
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
0.0000625 0.0147200 0.0494300 0.1300000 0.1476000 0.9944000 
	voom raw
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
0.0000375 0.0188600 0.0703200 0.1579000 0.2110000 0.9936000 
	voom sum
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
0.000025 0.008853 0.033510 0.120200 0.128200 0.994600 
	DESeq2 raw
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
0.000075 0.024200 0.071740 0.154200 0.200600 0.994400 
	DESeq2 sum
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
0.0000625 0.0147400 0.0442400 0.1450000 0.1497000 1.0000000 

> 
> ##################################################
> # End.
> 
> sessionInfo()
R version 3.2.2 (2015-08-14)
Platform: x86_64-pc-linux-gnu (64-bit)

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats4    stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
 [1] DESeq2_1.10.1              RcppArmadillo_0.6.400.2.2 
 [3] Rcpp_0.12.3                SummarizedExperiment_1.0.2
 [5] Biobase_2.30.0             GenomicRanges_1.22.3      
 [7] GenomeInfoDb_1.6.1         IRanges_2.4.6             
 [9] S4Vectors_0.8.7            BiocGenerics_0.16.1       
[11] edgeR_3.12.0               limma_3.26.5              

loaded via a namespace (and not attached):
 [1] RColorBrewer_1.1-2   futile.logger_1.4.1  plyr_1.8.3          
 [4] XVector_0.10.0       futile.options_1.0.0 zlibbioc_1.16.0     
 [7] statmod_1.4.23       rpart_4.1-10         RSQLite_1.0.0       
[10] annotate_1.48.0      gtable_0.1.2         lattice_0.20-33     
[13] DBI_0.3.1            gridExtra_2.0.0      genefilter_1.52.0   
[16] cluster_2.0.3        locfit_1.5-9.1       grid_3.2.2          
[19] nnet_7.3-11          AnnotationDbi_1.32.3 XML_3.98-1.3        
[22] survival_2.38-3      BiocParallel_1.4.3   foreign_0.8-66      
[25] latticeExtra_0.6-26  Formula_1.2-1        geneplotter_1.48.0  
[28] ggplot2_2.0.0        lambda.r_1.1.7       Hmisc_3.17-1        
[31] scales_0.3.0         splines_3.2.2        xtable_1.8-0        
[34] colorspace_1.2-6     acepack_1.3-3.3      munsell_0.4.2       
> 
> proc.time()
     user    system   elapsed 
37855.273     4.576 37871.443 

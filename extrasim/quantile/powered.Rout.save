
R version 3.3.1 Patched (2016-08-05 r71041) -- "Bug in Your Hair"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ##################################################
> # Setting up the simulation parameters.
> 
> set.seed(10000)
> 
> conditions <- rep(c("A", "B"), each=2)
> nplates <- length(conditions)
> ngenes <- 10000
> 
> all.means <- exp(runif(ngenes, 3, 8))
> disp <- 0.5 + 100/all.means
> plate.var <- 0.5
> 
> plate.grouping <- factor(conditions)
> alphas <- c(0.01, 0.002, 0.05)
> 
> fc <- 3
> first.set <- 1:1000
> second.set <- first.set + 1000
> combined.set <- c(first.set, second.set)
> 
> ##################################################
> # Odds and ends.
> 
> suppressPackageStartupMessages(require(edgeR))
> 
> compute.roc <- function(x) {
+     x[is.na(x)] <- 1
+     fn <- x[combined.set]
+     tn <- x[-combined.set]
+     return(findInterval(sort(fn), sort(tn))/length(tn))    
+ }
> 
> ##################################################
> # Running across all options.
> 
> for (pv in c(0, 0.5)) { 
+     total.collected <- list()               
+     for (scenario in 1:4) { 
+         for (flip in c(TRUE, FALSE)) {
+             edgeR.collected <- list()
+ 
+             if (scenario==1L) {
+                 lib.sizes <- lapply(c(100, 100, 10, 10), FUN=rep, x=1)
+             } else if (scenario==2L) {
+                 lib.sizes <- rep(list(rep(1, 50)), nplates)
+                 lib.sizes[[1]][1:20] <- lib.sizes[[2]][1:20] <- 5
+             } else if (scenario==3L) {
+                 lib.sizes <- rep(list(rep(1, 50)), nplates)
+                 lib.sizes[[1]][1:10] <- lib.sizes[[2]][1:10] <- 10
+             } else if (scenario==4L) { 
+                 lib.sizes <- rep(list(rep(1, 50)), nplates)
+                 lib.sizes[[1]][1:5] <- lib.sizes[[2]][1:5] <- 20
+             }
+ 
+             if (flip) { 
+                 tmp <- lib.sizes[[2]]
+                 lib.sizes[[2]] <- lib.sizes[[4]]
+                 lib.sizes[[4]] <- tmp
+             }
+  
+             for (it in 1:10) {
+                 mean.per.plate <- all.means * exp(matrix(rnorm(nplates*ngenes, -pv/2, sqrt(pv)), ncol=nplates))
+ 
+                 # Adding balanced 2-fold DE to the first 2000 genes. Don't worry about DE being concentrated at high-abundances,
+                 # the fact that we have a spread of abundances for non-DE genes should mitigate any effects.
+                 mean.per.plate[first.set,conditions=="A"] <- mean.per.plate[first.set,conditions=="A"]*fc
+                 mean.per.plate[second.set,conditions=="B"] <- mean.per.plate[second.set,conditions=="B"]*fc
+ 
+                 collected <- list()
+                 for (x in seq_len(nplates)) {
+                     mean.per.cell <- outer(mean.per.plate[,x], lib.sizes[[x]], "*")
+                     collected[[x]] <- matrix(rnbinom(length(mean.per.cell), mu=mean.per.cell, size=1/disp), nrow=ngenes)
+                 }
+ 
+                 for (mode in c("raw", "sum")) {
+                     if (mode=="raw") {
+                         counts <- do.call(cbind, collected)
+                         cell.grouping <- factor(rep(conditions, lapply(collected, ncol)))
+                         design <- model.matrix(~cell.grouping)
+                     } else {
+                         counts <- do.call(cbind, lapply(collected, rowSums))
+                         design <- model.matrix(~plate.grouping)
+                     }
+                     
+                     # edgeR QL:
+                     y <- DGEList(counts)
+                     y <- calcNormFactors(y)
+                     y <- estimateDisp(y, design)
+                     fit <- glmQLFit(y, design, robust=TRUE)
+                     res <- glmQLFTest(fit)
+                     
+                     edgeR.collected[[mode]][[it]] <- compute.roc(res$table$PValue)
+                 }
+             }
+ 
+             indicator <- as.character(scenario * (-1)^flip)
+             total.collected[[indicator]] <- edgeR.collected
+ 
+             # Printing out some output as a record.
+             cat(sprintf("Power for PV=%.1f, scenario=%s\n", pv, indicator))
+             cat("\tedgeR raw\n")
+             ave.roc <- colMeans(do.call(rbind, edgeR.collected$raw))
+             errs <- 10^-(4:1)
+             detected <- sapply(errs, function(x) max(which(ave.roc <= x)))/length(ave.roc) * 100
+             names(detected) <- errs
+             print(detected)
+             cat("\tedgeR sum\n")
+             ave.roc <- colMeans(do.call(rbind, edgeR.collected$sum))
+             detected <- sapply(errs, function(x) max(which(ave.roc <= x)))/length(ave.roc) * 100
+             names(detected) <- errs
+             print(detected)
+             cat("\n")
+         }
+     }
+             
+     saveRDS(file=ifelse(pv<1e-8, "without.rds", "with.rds"), total.collected)
+ }
Power for PV=0.0, scenario=-1
	edgeR raw
1e-04 0.001  0.01   0.1 
91.85 96.40 98.95 99.85 
	edgeR sum
1e-04 0.001  0.01   0.1 
79.70 84.80 91.10 96.95 

Power for PV=0.0, scenario=1
	edgeR raw
1e-04 0.001  0.01   0.1 
65.85 74.80 85.00 94.95 
	edgeR sum
1e-04 0.001  0.01   0.1 
61.00 70.60 84.30 94.55 

Power for PV=0.0, scenario=-2
	edgeR raw
1e-04 0.001  0.01   0.1 
90.40 95.30 98.45 99.70 
	edgeR sum
1e-04 0.001  0.01   0.1 
91.65 95.65 98.40 99.55 

Power for PV=0.0, scenario=2
	edgeR raw
1e-04 0.001  0.01   0.1 
87.95 94.05 98.10 99.65 
	edgeR sum
1e-04 0.001  0.01   0.1 
91.80 95.45 98.15 99.60 

Power for PV=0.0, scenario=-3
	edgeR raw
1e-04 0.001  0.01   0.1 
90.65 95.55 98.60 99.85 
	edgeR sum
1e-04 0.001  0.01   0.1 
86.75 91.50 96.05 98.90 

Power for PV=0.0, scenario=3
	edgeR raw
1e-04 0.001  0.01   0.1 
90.00 94.60 98.25 99.65 
	edgeR sum
1e-04 0.001  0.01   0.1 
84.85 90.45 95.25 98.55 

Power for PV=0.0, scenario=-4
	edgeR raw
1e-04 0.001  0.01   0.1 
91.15 95.40 98.45 99.75 
	edgeR sum
1e-04 0.001  0.01   0.1 
73.30 81.30 90.45 96.95 

Power for PV=0.0, scenario=4
	edgeR raw
1e-04 0.001  0.01   0.1 
90.60 95.55 98.55 99.75 
	edgeR sum
1e-04 0.001  0.01   0.1 
63.55 77.90 88.05 95.90 

Power for PV=0.5, scenario=-1
	edgeR raw
1e-04 0.001  0.01   0.1 
 0.45  1.80  7.35 30.20 
	edgeR sum
1e-04 0.001  0.01   0.1 
 0.35  2.15 11.00 39.35 

Power for PV=0.5, scenario=1
	edgeR raw
1e-04 0.001  0.01   0.1 
 0.40  2.15  8.45 36.05 
	edgeR sum
1e-04 0.001  0.01   0.1 
 0.55  1.95 10.25 38.90 

Power for PV=0.5, scenario=-2
	edgeR raw
1e-04 0.001  0.01   0.1 
 0.75  2.55 10.45 37.60 
	edgeR sum
1e-04 0.001  0.01   0.1 
 0.55  2.15 10.95 40.20 

Power for PV=0.5, scenario=2
	edgeR raw
1e-04 0.001  0.01   0.1 
 0.70  2.35 10.10 38.05 
	edgeR sum
1e-04 0.001  0.01   0.1 
 0.40  2.55 11.20 40.55 

Power for PV=0.5, scenario=-3
	edgeR raw
1e-04 0.001  0.01   0.1 
 0.60  2.60 10.95 38.20 
	edgeR sum
1e-04 0.001  0.01   0.1 
 0.55  2.45 10.80 39.60 

Power for PV=0.5, scenario=3
	edgeR raw
1e-04 0.001  0.01   0.1 
 0.65  2.50 10.35 38.10 
	edgeR sum
1e-04 0.001  0.01   0.1 
 0.55  2.45 11.10 40.15 

Power for PV=0.5, scenario=-4
	edgeR raw
1e-04 0.001  0.01   0.1 
 0.35  2.65 11.00 38.30 
	edgeR sum
1e-04 0.001  0.01   0.1 
 0.55  2.00 10.20 38.50 

Power for PV=0.5, scenario=4
	edgeR raw
1e-04 0.001  0.01   0.1 
 0.55  2.80 11.10 37.95 
	edgeR sum
1e-04 0.001  0.01   0.1 
 0.35  2.65 10.45 38.00 

> 
> ##################################################
> # End.
> 
> sessionInfo()
R version 3.3.1 Patched (2016-08-05 r71041)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 14.04.5 LTS

locale:
 [1] LC_CTYPE=en_GB.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_GB.UTF-8        LC_COLLATE=en_GB.UTF-8    
 [5] LC_MONETARY=en_GB.UTF-8    LC_MESSAGES=en_GB.UTF-8   
 [7] LC_PAPER=en_GB.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_GB.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] edgeR_3.14.0  limma_3.28.17

loaded via a namespace (and not attached):
[1] splines_3.3.1   grid_3.3.1      locfit_1.5-9.1  statmod_1.4.25 
[5] lattice_0.20-33
> 
> proc.time()
    user   system  elapsed 
7060.676   13.137 7076.392 

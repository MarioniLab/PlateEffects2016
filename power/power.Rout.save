
R version 3.2.2 (2015-08-14) -- "Fire Safety"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ##################################################
> # Setting up the simulation parameters.
> 
> set.seed(10000)
> 
> conditions <- rep(c("A", "B"), each=3)
> nplates <- length(conditions)
> ngenes <- 10000
> ncells <- 50
> 
> all.means <- exp(runif(ngenes, 3, 8))
> disp <- 0.5 + 100/all.means
> plate.var <- 0.5
> fc <- 3
> 
> cell.grouping <- factor(rep(conditions, each=ncells))
> design.all <- model.matrix(~cell.grouping)
> plate.grouping <- factor(conditions)
> design.sum <- model.matrix(~plate.grouping)
> 
> alphas <- c(1e-5, 1e-4, 1e-3, 0.01, 0.1)
> alphas <- sort(c(alphas, alphas*3))
> first.set <- 1:1000
> second.set <- first.set + 1000
> combined.set <- c(first.set, second.set)
> plate.of.origin <- rep(seq_len(nplates), each=ncells)
> 
> ##################################################
> 
> compute.roc <- function(x) {
+     x[is.na(x)] <- 1
+     fn <- x[combined.set]
+     tn <- x[-combined.set]
+     return(findInterval(sort(fn), sort(tn))/length(tn))    
+ }
> 
> ##################################################
> # Running across all options.
> 
> suppressPackageStartupMessages(require(edgeR))
> suppressPackageStartupMessages(require(DESeq2))
> 
> for (pv in c(0, plate.var)) {
+     edgeR.collected <- DESeq2.collected <- voom.collected <- list(sum=list(), raw=list())
+ 
+     for (it in 1:10) {
+         mean.per.plate <- all.means * exp(matrix(rnorm(nplates*ngenes, -pv/2, sqrt(pv)), ncol=nplates))
+         
+         # Adding balanced 2-fold DE to the first 2000 genes.
+         mean.per.plate[first.set,conditions=="A"] <- mean.per.plate[first.set,conditions=="A"]*fc
+         mean.per.plate[second.set,conditions=="B"] <- mean.per.plate[second.set,conditions=="B"]*fc
+ 
+         all.counts <- matrix(0L, nrow=ngenes, ncol=ncells*nplates)
+         for (x in seq_len(nplates)) {
+             all.counts[,seq_len(ncells)+ncells*(x-1L)] <- rnbinom(ngenes*ncells, mu=mean.per.plate[,x], size=1/disp)
+         }
+ 
+         for (mode in c("raw", "sum")) {
+             if (mode=="raw") {
+                 counts <- all.counts
+                 design <- design.all
+                 grp <- cell.grouping
+             } else {
+                 counts <- sumTechReps(all.counts, plate.of.origin)
+                 design <- design.sum
+                 grp <- plate.grouping
+             }
+ 
+             # edgeR QL:
+             y <- DGEList(counts)
+             y <- calcNormFactors(y)
+             y <- estimateDisp(y, design, prior.df=0)
+             fit <- glmQLFit(y, design, robust=TRUE)
+             res <- glmQLFTest(fit)
+             edgeR.collected[[mode]][[it]] <- compute.roc(res$table$PValue)
+ 
+             # DESeq2
+             suppressMessages(dds <- DESeqDataSetFromMatrix(counts, colData=DataFrame(grp=grp), design = ~grp))
+             suppressMessages(dds <- DESeq(dds))
+             res <- results(dds, c("grp", "A", "B"))
+             DESeq2.collected[[mode]][[it]] <- compute.roc(res$pvalue)
+ 
+             # voom without correlations
+             v.all <- voom(y, design)
+             fit <- lmFit(v.all, design)
+             fit <- eBayes(fit, robust=TRUE)
+             res <- topTable(fit, n=Inf, sort.by="none", coef=2)
+             voom.collected[[mode]][[it]] <- compute.roc(res$P.Value)
+         }
+     }
+ 
+     saveRDS(file=ifelse(pv<1e-8, "without.rds", "with.rds"), list(edgeR=edgeR.collected, DESeq2=DESeq2.collected, voom=voom.collected))
+ }
> 
> ##################################################
> # End.
> 
> sessionInfo()
R version 3.2.2 (2015-08-14)
Platform: x86_64-pc-linux-gnu (64-bit)

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats4    stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
 [1] DESeq2_1.10.0              RcppArmadillo_0.6.300.2.0 
 [3] Rcpp_0.12.2                SummarizedExperiment_1.0.1
 [5] Biobase_2.30.0             GenomicRanges_1.22.1      
 [7] GenomeInfoDb_1.6.1         IRanges_2.4.5             
 [9] S4Vectors_0.8.5            BiocGenerics_0.16.1       
[11] edgeR_3.12.0               limma_3.26.3              

loaded via a namespace (and not attached):
 [1] RColorBrewer_1.1-2   futile.logger_1.4.1  plyr_1.8.3          
 [4] XVector_0.10.0       futile.options_1.0.0 tools_3.2.2         
 [7] zlibbioc_1.16.0      statmod_1.4.22       rpart_4.1-10        
[10] digest_0.6.8         RSQLite_1.0.0        annotate_1.48.0     
[13] gtable_0.1.2         lattice_0.20-33      DBI_0.3.1           
[16] proto_0.3-10         gridExtra_2.0.0      genefilter_1.52.0   
[19] cluster_2.0.3        stringr_1.0.0        locfit_1.5-9.1      
[22] nnet_7.3-11          grid_3.2.2           AnnotationDbi_1.32.2
[25] XML_3.98-1.3         survival_2.38-3      BiocParallel_1.4.0  
[28] foreign_0.8-66       latticeExtra_0.6-26  Formula_1.2-1       
[31] geneplotter_1.48.0   ggplot2_1.0.1        reshape2_1.4.1      
[34] lambda.r_1.1.7       magrittr_1.5         scales_0.3.0        
[37] Hmisc_3.17-0         MASS_7.3-45          splines_3.2.2       
[40] xtable_1.8-0         colorspace_1.2-6     stringi_1.0-1       
[43] acepack_1.3-3.3      munsell_0.4.2       
> 
> proc.time()
    user   system  elapsed 
37603.64    25.32 37638.49 
